# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
  api_commentaires:
    image: tomcat:latest
    container_name: tomcat
    depends_on:
      - mongodb
    build:
      context: .
    ports:
      - "8020:8020" #l'url est localhost:8080/commentaires
    volumes:
      - /home/oce/GitHub/gitM1/commentaires/build/libs/commentaires-1.0-SNAPSHOT.war:/usr/local/tomcat/webapps/commentaires.war
    networks:
      - backend
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/commentaires
  mongodb:
    container_name: mongodb
    image: mongo:latest
    restart: no
    ports:
      - "27017:27017"
    networks:
      - backend

networks:
  backend:
    driver: bridge
    name: backend
    attachable: true
